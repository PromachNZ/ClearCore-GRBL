https://github.com/grblHAL/core/wiki/Hardware-Abstraction-Layer-(HAL)----developer-reference
  extracted <code> elements on 210606, the original html might be dated

Constants:
  uint32_t version
  char *info
  char *driver_version
  char *driver_options
  char *board
  uint32_t f_step_timer
  uint32_t rx_buffer_size

Required entry points that must be assigned by the driver:
  bool (*driver_setup)(settings_t *settings)

  Limits struct:
    void (*limits_enable)(bool on)
    limit_signals_t (*limits_get_state)(void)

  Coolant:
    void (*coolant_set_state)(coolant_state_t mode)
    coolant_state_t (*coolant_get_state)(void)
    void (*delay_ms)(uint32_t ms, delay_callback_ptr callback)

  Probe:
    bool (*probe_get_state)(void)

  Spindle struct:
    void (*spindle_set_state)(spindle_state_t state, float rpm)
    spindle_state_t (*spindle_get_state)(void)
    void (*spindle_update_rpm)(float rpm)

  Signals:
    control_signals_t (*system_control_get_state)(void)

  Stepper:
    void (*stepper_wake_up)(void)
    void (*stepper_go_idle)(void)
    void (*stepper_enable)(axes_signals_t enable)
    void (*stepper_set_outputs)(axes_signals_t step_outbits)
    void (*stepper_set_directions)(axes_signals_t dir_outbits)
    void (*stepper_cycles_per_tick)(uint32_t cycles_per_tick)
    void (*stepper_pulse_start)(stepper_t *stepper)

  Stream structure, io_stream_t:
    uint16_t (*stream.get_rx_buffer_available)(void)
    bool (*stream.write)(const char *s)
    void (*stream.write_all)(const char *s)
    int16_t (*stream.read)(void)
    void (*stream.reset_read_buffer)(void)
    void (*stream.cancel_read_buffer)(void)
    bool (*stream.suspend_read)(bool await)
    bool (*stream.enqueue_realtime_command)(char data)

  Atomic set/clear functions:
    void (*set_bits_atomic)(volatile uint_fast16_t *value, uint_fast16_t bits)
    uint_fast16_t (*clear_bits_atomic)(volatile uint_fast16_t *value, uint_fast16_t bits)
    uint_fast16_t (*set_value_atomic)(volatile uint_fast16_t *value, uint_fast16_t bits)
    void (*settings_changed)(settings_t *settings)


Optional entry points that may be assigned by the driver:
  bool (*driver_release)(void)

  void (*execute_realtime)(uint8_t state)

  uint8_t (*driver_mcode_check)(uint8_t mcode)
  status_code_t (*driver_mcode_validate)(parser_block_t *gc_block, uint32_t *value_words)
  void (*driver_mcode_execute)(uint_fast16_t state, parser_block_t *gc_block)

  void (*driver_rt_command_execute)(uint8_t cmd)
  void (*driver_rt_report)(void)

  void (*driver_feedback_message)(void)

  status_code_t (*driver_sys_command_execute)(uint_fast16_t state, char *line, char *lcline)

  bool (*get_position)(int32_t (*position)[N_AXIS])

  void (*tool_select)(tool_data_t *tool)
  void (*tool_change)(parser_state_t *gc_state)

  void (*show_message)(const char *msg)

  void (*report_options)(void)

  void (*driver_reset)(void)
  bool (*driver_setting)(uint_fast16_t setting, float value, char *svalue)
  void (*driver_settings_restore)(uint8_t restore_flag)
  void (*driver_settings_report)(bool axis_settings)

  spindle_data_t (*spindle_get_data)(spindle_data_request_t request)
  void (*spindle_reset_data)(void)


Non volatile storage of settings:
  eeprom_type type
    uint16_t size
    uint16_t driver_area.address
    uint16_t driver_area.size
    bool (*memcpy_from_flash)(uint8_t *dest)
    bool (*memcpy_to_flash)(uint8_t *source)
    uint8_t (*get_byte)(uint32_t addr)
    void (*put_byte)(uint32_t addr, uint8_t new_value)
    void (*memcpy_to_with_checksum)(uint32_t destination, uint8_t *source, uint32_t size)
    bool (*memcpy_from_with_checksum)(uint8_t *destination, uint32_t source, uint32_t size)


Entry points set by and normally used internally by the core:
  void (*report_status_message)(status_code_t status_code)

Entry points to be called by the driver, set up by the core:
  bool (*protocol_enqueue_gcode)(char *data)
  bool (*protocol_process_realtime)(char data)
  bool (*serial_blocking_callback)(void)
  void (*stepper_interrupt_callback)(void)
  void (*limit_interrupt_callback)(axes_signals_t state)
  void (*control_interrupt_callback)(control_signals_t signals)
  void (*spindle_index_callback)(spindle_data_t *rpm)

Driver capabilities: (REQUIRED)
  mist_control
  variable_spindle
  safety_door
  spindle_dir
  software_debounce
  step_pulse_delay
  limits_pull_up
  control_pull_up
  probe_pull_up
  amass_level - this has two bits allocated allowing 0-3 range to be specified, may be removed
  program_stop - input signal
  spindle_at_speed - required for spindle synchronized motion
  spindle_pwm_invert
  spindle_pid
  laser_ppi_mode - laser pulses per inch supported
  spindle_sync - for spindle synchronized motion
  sd_card
  bluetooth
  ethernet
  wifi
